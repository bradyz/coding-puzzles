:)
# implement queue
# queue(), dequeue() FIFO
# stack 
# push(), pop() FILO
start -> [] <- end
push 1
[1]
push 2
[1, 2]
push 3
####
[1, 2, 3]
  dequeue
pop(len(arr) - 1) = pop(2)
  tmp = [3, 2] 
  stack = [1]
element = stack.pop()
  stack = []

  class queue:
    def __init__(self):
## ordered
      self.s1 = Stack()
## backwards ordered
self.s2 = Stack()

# O(1)
  def queue(self, el):
    self.s1.push(el)

    [1, 2, 3]
    dq
    [2, 3]
    q 4
    [2, 3, 4]

# s1 [1, 2, 3]
# s2 []
# dq
# s1 []
# s2 [3, 2]
# dq



# O(n)
    def dequeue(self):
      element = None

      if len(self.s2) > 0:
return self.s2.pop()

  for x in range(len(self.s1) - 1):
    self.s2.push(self.s1.pop())

# [1, 2, 3]

    return self.s1.pop()
